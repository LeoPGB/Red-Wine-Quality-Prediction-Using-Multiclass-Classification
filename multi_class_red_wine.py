# -*- coding: utf-8 -*-
"""multi_class_red_wine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wSNbrDkpBnKLenhHtVm43hZ40RxS-vCR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from keras.models import load_model

df = pd.read_csv('/content/wine.csv')
df.head()

df.shape

df.count()

df.describe()

df.info()

df.isna().sum()

plt.figure(figsize=(15,10))
sns.heatmap(df.corr(), annot=True)
plt.show()

sns.countplot(x='quality',data=df)

x = df.drop('quality', axis=1)
y = df['quality']

x.head()

y.head()

x.shape, y.shape

model= keras.Sequential()
model.add(layers.Dense(11, activation='relu'))
model.add(layers.Dense(10, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(x, y, validation_split=0.25, epochs=150)

model.summary()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['train', 'test'], loc='upper right')

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['train', 'test'], loc='lower right')

sample = df.sample(n=1)
x_pred = sample.drop('quality', axis=1)
y_true = sample['quality'].to_numpy().astype('int32')
y_pred = model.predict(x_pred)

print('Prediction Values From Sample: ', y_pred)
max = np.argmax(y_pred, axis=1)
print('Predicted Quality From Sample: ', max, '\nPrediction Accuracy: ',y_pred[0][max]*100/np.sum(y_pred),
      '%\nTrue Quality from Sample: ', y_true)

model.save('multi_class_red_wine_model.h5')

del model

model = load_model('multi_class_red_wine_model.h5')

sample = df.sample(n=1)
x_pred = sample.drop('quality', axis=1)
y_true = sample['quality'].to_numpy().astype('int32')
y_pred = model.predict(x_pred)

print('Prediction Values From Sample: ', y_pred)
max = np.argmax(y_pred, axis=1)
print('Predicted Quality From Sample: ', max, '\nPrediction Accuracy: ',y_pred[0][max]*100/np.sum(y_pred),
      '%\nTrue Quality from Sample: ', y_true)

